-, Pods tiêu thụ node resources và PersistentVolumeClaims tiêu thụ PersistentVolumes resources.

-, kubectl apply -f name_pv.yaml: nếu chạy lệnh này mà thấy cột Status chuyển về Bound tức là PV này đã dc PVC tiêu thụ

-, Lợi ích của việc xài PersistentVolumeClaim:
Trong bài viết này thì các bạn sẽ thấy so sánh với volume thì xài PersistentVolumeClaim ta cần làm nhiều bước hơn. 
Nhưng với góc nhìn của developer khi làm thực tế thì bây giờ ta chỉ cần tạo PVCs và chỉ định size của nó, 
sau đó trong Pod ta chỉ cần chỉ định tên của PVCs, ta không cần phải làm việc với kiến trúc storage bên dưới node 
của ta, và ta cũng chả cần biết là dữ liệu ta được lưu ở worker node hay là ở storage của cloud hay là ở chỗ khác. 
Những thứ đó là việc của cluster administrator.

-, Và file config của PVCs ta có thể xài lại ở những cluster khác được, trong khi ta xài volume thì ta cần phải xem 
là cluster đó hỗ trợ những kiến trúc storage nào trước, nên một file config có thể khó xài được ở những cluster 
khác nhau.

-, Khi tạo PV thì ta để ý có một thuộc tính là persistentVolumeReclaimPolicy, thuộc tính này sẽ định nghĩa hành 
động của PV như thế nào khi PVCs bị xóa đi, có 3 mode là:
., Retain: khi ta delete PVCs thì PV của ta vẫn tồn tại ở đó, nhưng nó PV sẽ ở trạng thái là Release chứ không phải
Available như ban đầu, vì nó đã được sử dụng bởi PVCs và chứa dữ liệu rồi, nếu để thằng PVCs bound vào thì có thể 
gây ra lỗi, dùng mode này khi ta muốn lỡ có ta có xóa PVCs thì dữ liệu của ta vẫn con đó
., Recycle:khi ta delete PVCs thì PV của ta vẫn tồn tại ở đó, nhưng lúc này dữ liệu trong PV sẽ bị xóa đi luôn và 
trạng thái sẽ là Available để cho một thằng PVCs khác có thể tiêu thụ nó. Hiện tại thì GCE Persistent Disks không 
có hỗ Recycle policy.
., Delete: khi ta xóa PVCs đi thì PV ta cũng bị xóa theo luôn.

-, ta vẫn cần một administrator setup những thứ đó trước. Để tránh việc đó thì Kubernetes có cung cấp ta một cách 
để tự động tạo PV bên dưới:
Cách mà "administrator setup trước gọi là Pre provisioning, còn cách tự động gọi là Dynamic provisioning."
Để làm được việc này thì ta sẽ sử dụng "StorageClasses với một provisioner (được cloud hỗ trợ mặc định)", 
còn các "môi trường không phải cloud thì ta phải cài provisioner."
StorageClass: Đây là resource sẽ tự động tạo PV cho ta, ta chỉ cần tạo StorageClass một lần

-, Dynamic provisioning mà không cần chỉ định storage class:
., Khi ta không chỉ định thuộc tính storageClassName trong PVCs thì nó sẽ xài storage class mặc định (mặc định xài standard storageClassName)
., Còn nhở ở file config ban đầu của chúng ta, ta chỉ định thuộc tính storageClassName = "" (tại file PersistentVolumeClaim.yaml)
Ý nghĩa của nó ở đây là ta sẽ "không sử dụng storageClassName" để tự động tạo PV "mà ta sẽ xài PV có sẵn". Tại sao lại có như vậy, 
sao không xài storage class luôn đi cho nhanh mà phải tạo PV rồi xài, mất công thế? Như đã nói ở trên ta "muốn xài được storage
class thì ta cần provisioner", thì hiện tại "chỉ có cloud là hỗ trợ sẵn provisioner thôi", nếu bạn cài trên "data center thông 
thường thì không có provisioner sẵn" cho bạn để bạn xài chức năng dynamic provisioning được.
